// Link problem: https://oj.vnoi.info/problem/bedao_g01_seqgame
// Time: 9:57 6/09/2024.

#include <bits/stdc++.h>
#define NAME "XPhuoc"

using namespace std;

#define X first
#define Y second
#define pb push_back
#define Fort(i, a, b) for (int i = (a), _b = (b); i <= _b; i++)
#define Ford(i, a, b) for (int i = (a), _b = (b); i >= _b; i--)

typedef pair<int, int> pairII;
typedef pair<int, long long> pairIL;

template <typename T>
    bool minimize(T &x, T y)
    {
        if (x <= y)
            return 0;

        x = y;
        return 1;
    }

/*..............................................................................................................................................*/

const int N = 1e5;
const long long INF = 1e18;

int n;
long long a[N + 7];

int m;

struct operation
{
    int l, r;
    long long d;

    operation(int _l, int _r, long long _d):
        l(_l), r(_r), d(_d) {};
};

struct SegmentTree
{
    int n;
    long long *a;

    int I;
    vector<int> low, high;
    vector<long long> laz, node;

    void build(int id, int l, int r)
    {
        low[id] = l;
        high[id] = r;

        if (l == r)
        {
            node[id] = a[r];

            return ;
        }

        int mid = (l + r) / 2;

        build(id * 2, l, mid);
        build(id * 2 + 1, mid + 1, r);

        node[id] = max(node[id * 2], node[id * 2 + 1]);
    }

    SegmentTree(int _n, long long _a[]): n(_n)
    {
        a = _a;

        I = 4 * N;

        low.resize(I);
        high.resize(I);

        node.resize(I);
        laz.resize(I);

        build(1, 1, n);
    }

    void down(int id)
    {
        int val = laz[id];
        laz[id] = 0;

        if (val == 0)
            return ;

        Fort(x, id * 2, id * 2 + 1)
        {
            laz[x] += val;
            node[x] += val;
        }

    }

    void update(int id, int u, int v, long long val)
    {
        if (low[id] > v || high[id] < u)
            return ;

        if (u <= low[id] && high[id] <= v)
        {
            laz[id] += val;
            node[id] += val;

            return ;
        }

        down(id);

        update(id * 2, u, v, val);
        update(id * 2 + 1, u, v, val);

        node[id] = max(node[id * 2], node[id * 2 + 1]);
    }

    long long query(int id, int u, int v)
    {
        if (low[id] > v || high[id] < u)
            return -INF;

        if (u <= low[id] && high[id] <= v)
            return node[id];

        down(id);

        return max(query(id * 2, u, v), query(id * 2 + 1, u, v));
    }

};


void Read()
{
    cin >> n;
}

void init()
{
    vector<operation> oper;

    cin >> m;

    Fort(i, 1, m)
    {
        int l, r;
        long long d;

        cin >> l >> r >> d;

        a[l] += d;
        a[r + 1] -= d;

        oper.push_back({l, r, d});
    }

    a[0] = 0;

    Fort(i, 1, n)
        a[i] += a[i - 1];

    SegmentTree ST(n, a);

    long long result = INF;

    for(operation ptr : oper)
    {
        int l = ptr.l;
        int r = ptr.r;

        long long d = ptr.d;

        ST.update(1, l, r, -d);

        result = min(result, ST.query(1, 1, n));

        ST.update(1, l, r, d);
    }

    cout << result << "\n";
}

void Solve()
{

}

int main()
{
    ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);

    #ifndef ONLINE_JUDGE
        freopen(NAME".INP", "r", stdin);
        freopen(NAME".OUT", "w", stdout);
    #endif // ONLINE_JUDGE

    int TEST = 1;

    if (TEST == 0)
        cin >> TEST;

    while (TEST--)
    {
        Read();
        init();
        Solve();
    }

    return 0;
}
